library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.TIPOS.all;

entity paddle0 is
	port(
		clk, reset:				 in std_logic;
		speed_tick:				 in std_logic;
		pixel_x, pixel_y:		 in std_logic_vector(9 downto 0);
		
		obj_on:				out std_logic;
		obj_RGB:				out TYPE_COR
	);
	
end puck;

architecture arch of paddle0 is
	--Definicoes basicas da img
	constant LINHAS:  integer := 50;
   constant COLUNAS: integer := 50;
	constant N_CORES:	integer := 30;
	--Dimensoes da Imagem na tela
	constant dimensao: integer := 50;
	signal obj_Ymin: integer := (480-dimensao)/2;
	signal obj_Ymax: integer := obj_Ymin + dimensao;
	signal obj_Xmin: integer := 100;
	signal obj_Xmax: integer := obj_Xmin + dimensao;
	--Definindo a img
	type linha_bitmap is array(0 to COLUNAS -1) of integer range 0 to N_CORES;
	type   obj_bitmap is array(0 to LINHAS  -1) of linha_bitmap;
	
   constant obj_matriz: obj_bitmap :=
	(
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 4, 3, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 11, 9, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 12, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 1, 3, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 13, 10, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 13, 13, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 7, 7, 7, 7, 14, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 10, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 15, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 17, 3, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 15, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 12, 0, 16, 3, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 18, 1, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 3, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 18, 16, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 3, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 19, 13, 13, 13, 13, 13, 15, 15, 15, 20, 4, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 2, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 3, 0, 0, 0, 0, 0),
		(0, 0, 0, 16, 5, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 20, 13, 1, 0, 0, 0, 0),
		(0, 0, 0, 3, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 21, 15, 15, 15, 15, 15, 20, 22, 4, 0, 0, 0, 0),
		(0, 0, 1, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 22, 2, 0, 0, 0),
		(0, 0, 3, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 23, 4, 0, 0, 0),
		(0, 1, 5, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 20, 1, 0, 0),
		(0, 2, 8, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 24, 20, 20, 20, 22, 25, 3, 0, 0),
		(0, 3, 8, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 23, 10, 17, 0),
		(1, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 1, 0),
		(2, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 25, 3, 0),
		(3, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 25, 4, 0),
		(3, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 25, 18, 0),
		(4, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 23, 22, 23, 18, 0),
		(5, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 19, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 26, 0),
		(5, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 26, 0),
		(5, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 15, 15, 15, 13, 15, 15, 15, 15, 20, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 26, 0),
		(5, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 26, 0),
		(4, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 25, 18, 0),
		(3, 10, 9, 9, 10, 10, 10, 10, 10, 10, 13, 19, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 18, 0),
		(3, 10, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 19, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 27, 4, 0),
		(2, 10, 10, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 27, 3, 0),
		(1, 9, 10, 10, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 1, 0),
		(0, 5, 13, 10, 10, 10, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 26, 17, 0),
		(0, 3, 13, 10, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 20, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 27, 3, 0, 0),
		(0, 1, 9, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 1, 0, 0),
		(0, 0, 3, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 27, 18, 0, 0, 0),
		(0, 0, 1, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 2, 0, 0, 0),
		(0, 0, 0, 3, 15, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 18, 0, 0, 0, 0),
		(0, 0, 0, 1, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 23, 1, 0, 0, 0, 0),
		(0, 0, 0, 0, 2, 20, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 3, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 3, 20, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 18, 28, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 28, 4, 22, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 18, 1, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 1, 18, 22, 20, 20, 20, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 26, 1, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 1, 5, 22, 20, 20, 20, 20, 20, 22, 22, 22, 22, 22, 23, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 17, 4, 22, 22, 20, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 27, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 26, 23, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 22, 23, 22, 22, 23, 22, 23, 23, 23, 23, 23, 25, 23, 25, 25, 25, 25, 25, 25, 25, 25, 27, 27, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 18, 22, 25, 25, 23, 23, 23, 23, 23, 25, 25, 25, 25, 25, 25, 25, 25, 27, 27, 25, 18, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 18, 22, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 27, 23, 18, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
		(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 28, 28, 16, 16, 1, 2, 3, 5, 10, 26, 29, 29, 29, 29, 26, 10, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 0, 0, 0, 0, 0)
	);
	
	signal cor_indice : integer := 0;
	type cor_int is array(0 to 2) of integer range 0 to 255;
	type matriz_cores is array(0 to N_CORES-1) of cor_int;
	constant obj_cores: matriz_cores :=
	(
		(0, 187, 204),--0
		(22, 185, 200),
		(45, 178, 189),
		(69, 152, 160),
		(65, 124, 130),
		(79, 112, 115),
		(0, 188, 204),--6
		(91, 92, 92),
		(84, 84, 84),
		(76, 76, 76),
		(67, 67, 67),
		(68, 68, 68),
		(0, 187, 203),--12
		(57, 57, 57),
		(92, 92, 92),
		(47, 47, 47),
		(9, 188, 204),--16
		(7, 187, 203),--17
		(45, 87, 91),
		(58, 58, 58),
		(39, 39, 39),
		(48, 48, 48),
		(32, 32, 32),
		(27, 27, 27),
		(40, 40, 40),
		(22, 22, 22),
		(35, 52, 54),
		(11, 11, 11),
		(3, 187, 204),--28
		(27, 40, 41)
	);

	
	signal pix_x: unsigned(9 downto 0) := unsigned( pixel_x );
	signal pix_y: unsigned(9 downto 0) := unsigned( pixel_y );
	
	begin
	
--		obj_Ymin <= 480/2;
--		obj_Xmin <= 640/2;
--		obj_Ymax <= puck_Ymin + dimensao;
--		obj_Xmax <= puck_Xmin + dimensao;
		pix_x 	 <= unsigned( pixel_x );
		pix_y 	 <= unsigned( pixel_y );

		process( pix_x, pix_y, cor_indice,
					obj_Xmin, obj_Xmax, obj_Ymin, obj_Ymax )
		begin
			obj_on		<= '0';
			obj_RGB(0)  <= "00000000";
			obj_RGB(1)  <= "00000000";
			obj_RGB(2)	<= "00000000";
			cor_indice	<= 0;
			
			if( (obj_Xmin <= pix_x) and (pix_x <= obj_Xmax) and
				 (obj_Ymin <= pix_y) and (pix_y <= obj_Ymax) ) then
				 
				cor_indice   <= obj_matriz(  img_row_index(  pix_y , obj_Ymin , obj_Ymax, LINHAS ) )
												  (  img_color_index(pix_x , obj_Xmin , obj_Xmax, COLUNAS) );
				
				case cor_indice is
					when 0  => puck_on <= '0';
					when 6  => puck_on <= '0';
					when 12 => puck_on <= '0';
					when 16 => puck_on <= '0';
					when 17 => puck_on <= '0';
					when 28 => puck_on <= '0';
					when others => puck_on <= '1';
				end case;
				
				puck_RGB(0) <= RGB_UNSIGNED( obj_cores(cor_indice)(0) );
				puck_RGB(1) <= RGB_UNSIGNED( obj_cores(cor_indice)(1) );
				puck_RGB(2) <= RGB_UNSIGNED( obj_cores(cor_indice)(2) );
				
			end if;
			
		end process;
		
end arch;